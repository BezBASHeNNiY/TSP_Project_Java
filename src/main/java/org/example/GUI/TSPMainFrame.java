/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.example.GUI;

import org.example.TSP.Tour;
import org.example.algorithm.Annealing.Annealing;
import org.example.TSP.Functions;

import org.example.algorithm.AntColonyOptimization.AntColonyOptimization;
import org.example.algorithm.Branches.BranchAndBounds;
import org.example.algorithm.GeneticAlgorithm.GeneticAlgorithm;
import org.example.algorithm.GeneticAlgorithm.Population;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.xy.XYSeriesCollection;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.text.DecimalFormat;
import java.util.HashMap;

/**
 * @author volch
 */
public class TSPMainFrame extends javax.swing.JFrame {
    
    private int algorithmType = 0;
    private int c;
    private ActionEvent e;

    public static int k = 1;
    public  int choice = 0;
    public static Tour primalTour;

    public static String algorithmName;
    public static HashMap<Integer, Double> resultContainer = new HashMap<>();
    public static XYSeriesCollection dataset = new XYSeriesCollection();
    public static DecimalFormat df = new DecimalFormat("###.###");
    public static JPanel myPanel;

    /**
     * Creates new form TSPMainFrame
     */

    public TSPMainFrame() {
        initComponents();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    // Generated using JFormDesigner Evaluation license - Artem
    private void initComponents() {
        jLabelCount = new JLabel();
        jButtonStart = new JButton();
        jTextFieldCount = new JTextField();
        jScrollPane1 = new JScrollPane();
        jTextAreaCity = new JTextArea();
        jButtonCancel = new JButton();
        jScrollPane2 = new JScrollPane();
        jTextAreaTours = new JTextArea();
        jLabel1 = new JLabel();
        jLabel2 = new JLabel();
        jButtonRandom = new JButton();
        jButton50test = new JButton();
        tabbedPane1 = new JTabbedPane();
        panelSettings = new JPanel();
        labelAlgorithm = new JLabel();
        radioButtonAnnealing = new JRadioButton();
        radioButtonGenetic = new JRadioButton();
        radioButtonBranches = new JRadioButton();
        labelParametr = new JLabel();
        parametrLabel1 = new JLabel();
        parametrField1 = new JTextField();
        parametrLabel2 = new JLabel();
        parametrField2 = new JTextField();
        parametrLabel3 = new JLabel();
        parametrField3 = new JTextField();
        parametrLabel4 = new JLabel();
        parametrField4 = new JTextField();
        checkBoxParametr1 = new JCheckBox();
        branchesButton = new JButton();
        panelDiagram = new JPanel();
        buttonClearResults = new JButton();
        buttonDiagram = new JButton();
        panelGuide = new JPanel();
        scrollPane1 = new JScrollPane();
        textAreaInstructions = new JTextArea();
        buttonShow = new JButton();

        //======== this ========
        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
        var contentPane = getContentPane();

        //---- jLabelCount ----
        jLabelCount.setText("\u041a\u0456\u043b\u044c\u043a\u0456\u0441\u0442\u044c \u043c\u0456\u0441\u0442");

        //---- jButtonStart ----
        jButtonStart.setText("\u0420\u043e\u0437\u0440\u0430\u0445\u0443\u0432\u0430\u0442\u0438");
        jButtonStart.addActionListener(e -> jButtonStartActionPerformed(e));

        //======== jScrollPane1 ========
        {

            //---- jTextAreaCity ----
            jTextAreaCity.setColumns(20);
            jTextAreaCity.setRows(5);
            jScrollPane1.setViewportView(jTextAreaCity);
        }

        //---- jButtonCancel ----
        jButtonCancel.setText("\u0421\u043a\u0430\u0441\u0443\u0432\u0430\u0442\u0438");
        jButtonCancel.addActionListener(e -> jButtonCancelActionPerformed(e));

        //======== jScrollPane2 ========
        {

            //---- jTextAreaTours ----
            jTextAreaTours.setColumns(20);
            jTextAreaTours.setRows(5);
            jScrollPane2.setViewportView(jTextAreaTours);
        }

        //---- jLabel1 ----
        jLabel1.setText("\u0406\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f \u043f\u0440\u043e \u043c\u0456\u0441\u0442\u0430");

        //---- jLabel2 ----
        jLabel2.setText("\u0406\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0456\u044f \u043f\u0440\u043e \u0456\u0442\u0435\u0440\u0430\u0446\u0456\u0457");

        //---- jButtonRandom ----
        jButtonRandom.setText("\u0412\u0438\u043f\u0430\u0434\u043a\u043e\u0432\u0456 \u043c\u0456\u0441\u0442\u0430");
        jButtonRandom.setName("jButtonRandom");
        jButtonRandom.addActionListener(e -> jButtonRandomActionPerformed(e));

        //---- jButton50test ----
        jButton50test.setText("50");
        jButton50test.addActionListener(e -> jButton50testActionPerformed(e));

        //======== tabbedPane1 ========
        {

            //======== panelSettings ========
            {
                panelSettings.setBorder (new javax. swing. border. CompoundBorder( new javax .swing .border .TitledBorder (new javax.
                swing. border. EmptyBorder( 0, 0, 0, 0) , "JF\u006frmD\u0065sig\u006eer \u0045val\u0075ati\u006fn", javax. swing. border
                . TitledBorder. CENTER, javax. swing. border. TitledBorder. BOTTOM, new java .awt .Font ("Dia\u006cog"
                ,java .awt .Font .BOLD ,12 ), java. awt. Color. red) ,panelSettings. getBorder
                ( )) ); panelSettings. addPropertyChangeListener (new java. beans. PropertyChangeListener( ){ @Override public void propertyChange (java
                .beans .PropertyChangeEvent e) {if ("\u0062ord\u0065r" .equals (e .getPropertyName () )) throw new RuntimeException
                ( ); }} );
                panelSettings.setLayout(null);

                //---- labelAlgorithm ----
                labelAlgorithm.setText("\u0410\u043b\u0433\u043e\u0440\u0438\u0442\u043c");
                panelSettings.add(labelAlgorithm);
                labelAlgorithm.setBounds(5, 5, 125, labelAlgorithm.getPreferredSize().height);

                //---- radioButtonAnnealing ----
                radioButtonAnnealing.setText("\u0406\u043c\u0456\u0442\u0430\u0446\u0456\u044f \u0432\u0456\u0434\u043f\u0430\u043b\u0443");
                radioButtonAnnealing.addActionListener(e -> annealingButton(e));
                panelSettings.add(radioButtonAnnealing);
                radioButtonAnnealing.setBounds(10, 25, 150, radioButtonAnnealing.getPreferredSize().height);

                //---- radioButtonGenetic ----
                radioButtonGenetic.setText("\u0413\u0435\u043d\u0435\u0442\u0438\u0447\u043d\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c");
                radioButtonGenetic.addActionListener(e -> geneticButton(e));
                panelSettings.add(radioButtonGenetic);
                radioButtonGenetic.setBounds(10, 45, 150, radioButtonGenetic.getPreferredSize().height);

                //---- radioButtonBranches ----
                radioButtonBranches.setText("\u041c\u0443\u0440\u0430\u0448\u0438\u043d\u0438\u0439 \u0430\u043b\u0433\u043e\u0440\u0438\u0442\u043c");
                radioButtonBranches.addActionListener(e -> antButton(e));
                panelSettings.add(radioButtonBranches);
                radioButtonBranches.setBounds(10, 70, 150, 19);

                //---- labelParametr ----
                labelParametr.setText("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u0438");
                labelParametr.setVisible(false);
                panelSettings.add(labelParametr);
                labelParametr.setBounds(5, 150, 90, labelParametr.getPreferredSize().height);

                //---- parametrLabel1 ----
                parametrLabel1.setText("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 1");
                parametrLabel1.setVisible(false);
                panelSettings.add(parametrLabel1);
                parametrLabel1.setBounds(10, 170, 175, parametrLabel1.getPreferredSize().height);

                //---- parametrField1 ----
                parametrField1.setVisible(false);
                panelSettings.add(parametrField1);
                parametrField1.setBounds(10, 185, 150, 25);

                //---- parametrLabel2 ----
                parametrLabel2.setText("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 2");
                parametrLabel2.setVisible(false);
                panelSettings.add(parametrLabel2);
                parametrLabel2.setBounds(10, 210, 175, parametrLabel2.getPreferredSize().height);

                //---- parametrField2 ----
                parametrField2.setVisible(false);
                panelSettings.add(parametrField2);
                parametrField2.setBounds(10, 225, 150, 25);

                //---- parametrLabel3 ----
                parametrLabel3.setText("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 3");
                parametrLabel3.setVisible(false);
                panelSettings.add(parametrLabel3);
                parametrLabel3.setBounds(10, 250, 175, 16);

                //---- parametrField3 ----
                parametrField3.setVisible(false);
                panelSettings.add(parametrField3);
                parametrField3.setBounds(10, 265, 150, 25);

                //---- parametrLabel4 ----
                parametrLabel4.setText("\u041f\u0430\u0440\u0430\u043c\u0435\u0442\u0440 4");
                parametrLabel4.setVisible(false);
                panelSettings.add(parametrLabel4);
                parametrLabel4.setBounds(10, 290, 175, 16);

                //---- parametrField4 ----
                parametrField4.setVisible(false);
                panelSettings.add(parametrField4);
                parametrField4.setBounds(10, 305, 150, 25);

                //---- checkBoxParametr1 ----
                checkBoxParametr1.setText("\u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440bool");
                checkBoxParametr1.setVisible(false);
                panelSettings.add(checkBoxParametr1);
                checkBoxParametr1.setBounds(170, 185, 105, checkBoxParametr1.getPreferredSize().height);

                //---- branchesButton ----
                branchesButton.setText("\u041f\u0456\u0434\u0433\u043e\u0442\u043e\u0432\u043a\u0430 \u0437\u0430\u0434\u0430\u0447\u0456 ");
                branchesButton.addActionListener(e -> branchesButton(e));
                panelSettings.add(branchesButton);
                branchesButton.setBounds(new Rectangle(new Point(180, 25), branchesButton.getPreferredSize()));

                {
                    // compute preferred size
                    Dimension preferredSize = new Dimension();
                    for(int i = 0; i < panelSettings.getComponentCount(); i++) {
                        Rectangle bounds = panelSettings.getComponent(i).getBounds();
                        preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                        preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
                    }
                    Insets insets = panelSettings.getInsets();
                    preferredSize.width += insets.right;
                    preferredSize.height += insets.bottom;
                    panelSettings.setMinimumSize(preferredSize);
                    panelSettings.setPreferredSize(preferredSize);
                }
            }
            tabbedPane1.addTab("\u041d\u0430\u043b\u0430\u0448\u0442\u0443\u0432\u0430\u043d\u043d\u044f", panelSettings);

            //======== panelDiagram ========
            {
                panelDiagram.setLayout(null);

                //---- buttonClearResults ----
                buttonClearResults.setText("\u041e\u0447\u0438\u0441\u0442\u0438\u0442\u0438 \u043f\u0443\u043b \u0440\u0456\u0448\u0435\u043d\u044c");
                buttonClearResults.addActionListener(e -> clearResults(e));
                panelDiagram.add(buttonClearResults);
                buttonClearResults.setBounds(10, 15, 135, buttonClearResults.getPreferredSize().height);

                //---- buttonDiagram ----
                buttonDiagram.setText("\u0414\u0456\u0430\u0433\u0440\u0430\u043c\u0430 \u0440\u0456\u0448\u0435\u043d\u044c");
                buttonDiagram.addActionListener(e -> buttonDiagram(e));
                panelDiagram.add(buttonDiagram);
                buttonDiagram.setBounds(10, 50, 135, buttonDiagram.getPreferredSize().height);

                {
                    // compute preferred size
                    Dimension preferredSize = new Dimension();
                    for(int i = 0; i < panelDiagram.getComponentCount(); i++) {
                        Rectangle bounds = panelDiagram.getComponent(i).getBounds();
                        preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                        preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
                    }
                    Insets insets = panelDiagram.getInsets();
                    preferredSize.width += insets.right;
                    preferredSize.height += insets.bottom;
                    panelDiagram.setMinimumSize(preferredSize);
                    panelDiagram.setPreferredSize(preferredSize);
                }
            }
            tabbedPane1.addTab("\u0414\u0456\u0430\u0433\u0440\u0430\u043c\u0430", panelDiagram);

            //======== panelGuide ========
            {
                panelGuide.setLayout(null);

                //======== scrollPane1 ========
                {
                    scrollPane1.setViewportView(textAreaInstructions);
                }
                panelGuide.add(scrollPane1);
                scrollPane1.setBounds(5, 5, 340, 410);

                {
                    // compute preferred size
                    Dimension preferredSize = new Dimension();
                    for(int i = 0; i < panelGuide.getComponentCount(); i++) {
                        Rectangle bounds = panelGuide.getComponent(i).getBounds();
                        preferredSize.width = Math.max(bounds.x + bounds.width, preferredSize.width);
                        preferredSize.height = Math.max(bounds.y + bounds.height, preferredSize.height);
                    }
                    Insets insets = panelGuide.getInsets();
                    preferredSize.width += insets.right;
                    preferredSize.height += insets.bottom;
                    panelGuide.setMinimumSize(preferredSize);
                    panelGuide.setPreferredSize(preferredSize);
                }
            }
            tabbedPane1.addTab("\u0406\u043d\u0441\u0442\u0440\u0443\u043a\u0446\u0456\u044f", panelGuide);
        }

        //---- buttonShow ----
        buttonShow.setText("\u041f\u043e\u043a\u0430\u0437\u0430\u0442\u0438 \u0437\u0430\u0434\u0430\u0447\u0443");
        buttonShow.addActionListener(e -> showGUI(e));

        GroupLayout contentPaneLayout = new GroupLayout(contentPane);
        contentPane.setLayout(contentPaneLayout);
        contentPaneLayout.setHorizontalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                        .addComponent(jButtonCancel, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(jButtonStart, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(jButtonRandom, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(jLabelCount, GroupLayout.Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jTextFieldCount, GroupLayout.PREFERRED_SIZE, 121, GroupLayout.PREFERRED_SIZE)
                        .addComponent(jButton50test, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE)
                        .addComponent(buttonShow, GroupLayout.DEFAULT_SIZE, 130, Short.MAX_VALUE))
                    .addGap(14, 14, 14)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jScrollPane2, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE))
                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(tabbedPane1, GroupLayout.PREFERRED_SIZE, 353, GroupLayout.PREFERRED_SIZE)
                    .addContainerGap(9, Short.MAX_VALUE))
        );
        contentPaneLayout.setVerticalGroup(
            contentPaneLayout.createParallelGroup()
                .addGroup(contentPaneLayout.createSequentialGroup()
                    .addContainerGap()
                    .addGroup(contentPaneLayout.createParallelGroup()
                        .addComponent(tabbedPane1)
                        .addGroup(contentPaneLayout.createSequentialGroup()
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                                .addComponent(jLabelCount)
                                .addComponent(jLabel1, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(jLabel2, GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE))
                            .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                            .addGroup(contentPaneLayout.createParallelGroup(GroupLayout.Alignment.TRAILING)
                                .addGroup(contentPaneLayout.createSequentialGroup()
                                    .addComponent(jTextFieldCount, GroupLayout.PREFERRED_SIZE, GroupLayout.DEFAULT_SIZE, GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)
                                    .addComponent(jButton50test)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(buttonShow)
                                    .addGap(4, 4, 4)
                                    .addComponent(jButtonRandom)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonStart)
                                    .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(jButtonCancel))
                                .addComponent(jScrollPane2)
                                .addComponent(jScrollPane1, GroupLayout.Alignment.LEADING))))
                    .addContainerGap())
        );
        pack();
        setLocationRelativeTo(getOwner());

        //---- buttonGroup1 ----
        var buttonGroup1 = new ButtonGroup();
        buttonGroup1.add(radioButtonAnnealing);
        buttonGroup1.add(radioButtonGenetic);
        buttonGroup1.add(radioButtonBranches);
    }// </editor-fold>//GEN-END:initComponents

    private void parametrVisible(String setText, JLabel paramlabel, JTextField paramField){
        paramlabel.setText(setText);
        paramlabel.setVisible(true);
        paramField.setVisible(true);
    }

    public static void checkAddResult(int choice){
        if (choice == 0) {
            //Add result
            Functions.addResult(resultContainer, k, algorithmName, dataset);
            k++;
        } else {
            //Skip
        }
    }

    private void showGUI(ActionEvent e) {
        showTour();
    }

    private void clearResults(ActionEvent e) {
        resultContainer.clear();
        dataset.removeAllSeries();
    }

    private void button2(ActionEvent e) {
        Tour currTour = new Tour();
        currTour.generate();
        System.out.println(currTour);
    }

    private void branchesButton(ActionEvent e) { primalTour = BranchAndBounds.start(primalTour.toBranchMatrix()); }

    private void hideParametrFields(){
        labelParametr.setVisible(false);
        parametrLabel1.setVisible(false);
        parametrField1.setVisible(false);
        parametrLabel2.setVisible(false);
        parametrField2.setVisible(false);
        parametrLabel3.setVisible(false);
        parametrField3.setVisible(false);
        parametrLabel4.setVisible(false);
        parametrField4.setVisible(false);
        checkBoxParametr1.setVisible(false);
    }
    //chose annealing algorithm
    private void annealingButton(ActionEvent e) {
        hideParametrFields();
        algorithmType = 1;
        algorithmName = "Annealing";
        labelParametr.setVisible(true);
        //show visible 1 param fields
        parametrVisible("Початкова температура", parametrLabel1, parametrField1);
        //show visible 2 param fields
        parametrVisible("Швидкість охолодження", parametrLabel2, parametrField2);
    }
    //choose genetic algorithm
    private void geneticButton(ActionEvent e) {
        hideParametrFields();
        algorithmType = 2;
        algorithmName = "Genetic Algorithm";
        labelParametr.setVisible(true);
        //show visible 1 param fields
        parametrVisible("Початкова популяція", parametrLabel1, parametrField1);
        //show visible 2 param fields
        parametrVisible("Кількість поколінь", parametrLabel2, parametrField2);
        //show visible 3 param fields
        parametrVisible("Вирогідність мутації", parametrLabel3, parametrField3);
        //show visible 4 param fields
        parametrVisible("Розмір групи", parametrLabel4, parametrField4);
        //show
        checkBoxParametr1.setText("Елітарність");
        checkBoxParametr1.setVisible(true);
    }
    //choose Ant Algorithm
    private void antButton(ActionEvent e) {
        hideParametrFields();
        algorithmType = 3;
        algorithmName = "Ant Optimization Colony";
        labelParametr.setVisible(true);
        //show visible 1 param fields
        parametrVisible("Максимальна кількість ітерацій", parametrLabel1, parametrField1);
        //show visible 2 param fields
        parametrVisible("Мурашиний фактор", parametrLabel2, parametrField2);
        //show visible 3 param fields
        parametrVisible("Фактор випадковості при виборі", parametrLabel3, parametrField3);
    }
    //create Table of results
    private void showTable(HashMap resultContainer){
        String[] columnName = {"Algorithm name", "Result", "Solve time", "Iteration count", "Parameter 1",
                                "Parameter 2", "Parameter 3", "Parameter 4", "Special parameter"};

        for (int i = 1;i < resultContainer.size();i++){

        }
    }
    //show diagram
    private void buttonDiagram(ActionEvent e) {
        this.e = e;

        if (resultContainer.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Пуста бібліотека рішень");
            return;
        } else {
            //generate the graph
            JFreeChart chart = ChartFactory.createXYLineChart(
                    "TSP distribution of solutions ", //title of chart
                    "Iteration number", //label of x-axis
                    "Length of distance", //label of y-axis
                    dataset, //dataset
                    PlotOrientation.VERTICAL,
                    true, //plot orientation
                    true,
                    false); //configure chart to generate URLS ?
            //initialize frame
            JFrame f = new JFrame("Diagram for TSP");
            f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
            //initialize panel with XY chart
            ChartPanel myChartPanel = new ChartPanel(chart);
            //show frame
            f.add(myChartPanel);
            f.pack();
            f.setVisible(true);
        }
    }
            
    private void jButtonStartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStartActionPerformed
        jTextAreaTours.setText("");
        if (jTextFieldCount.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Введіть кількість міст");
            return;
        }
        if (jTextAreaCity.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Введіть координати міст");
            return;
        }
        if (algorithmType == 0){
            JOptionPane.showMessageDialog(null, "Оберіть алгоритм");
            return;
        }
        if (!jTextAreaCity.getText().isEmpty() && !jTextFieldCount.getText().isEmpty() && algorithmType != 0){
            resultContainer.clear();
            simulate();
        };
    }//GEN-LAST:event_jButtonStartActionPerformed

    private void jButtonCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCancelActionPerformed
        jTextFieldCount.setText("");
        jTextAreaCity.setText("");
        jTextAreaTours.setText("");
    }//GEN-LAST:event_jButtonCancelActionPerformed

    private void jButtonRandomActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRandomActionPerformed
        resultContainer.clear();
        Functions.createTour(Integer.parseInt(jTextFieldCount.getText()), jTextAreaCity, jTextFieldCount, c);
        showTour();
    }//GEN-LAST:event_jButtonRandomActionPerformed

    private void jButton50testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton50testActionPerformed
        Functions.createTour(50, jTextAreaCity, jTextFieldCount, c);
        showTour();
    }//GEN-LAST:event_jButton50testActionPerformed

    private void showTour(){
        primalTour = new Tour();
        primalTour.generate();
        createAndShowGUI(primalTour);
    }

    public void simulate() {
        //resultContainer.clear();
        if (algorithmType == 1) {
            //start annealing algorithm
            Annealing.simulateAnnealing(parametrField1, parametrField2, jTextAreaTours, primalTour);
        } else if (algorithmType == 2) {
            //start time count
            long startTime = System.nanoTime();

            // Initialize population
            Population pop = new Population(Integer.parseInt(parametrField1.getText()), true);

            //Evolve population
            for (int i = 0; i < Float.parseFloat(parametrField2.getText()); i++) {
                jTextAreaTours.append("Покоління : " + (i + 1) + "\n");
                //
                pop = GeneticAlgorithm.evolvePopulation(pop, jTextAreaTours,
                                checkBoxParametr1.isSelected(),
                                Double.parseDouble(parametrField3.getText()),
                                Integer.parseInt(parametrField4.getText()), i);
            }
            createAndShowGUI(GeneticAlgorithm.bestTour);

            //time of algorithm work
            long estimatedTime = System.nanoTime() - startTime;
            jTextAreaTours.append("Algorithm time: " + (estimatedTime / Math.pow(10, 9)));

            //Msg for option dialog
            String msg = "Найкраще рішення: " + df.format(pop.getFittest().getDistance()) +
                    "\n" + "Час роботи алгоритму: " + df.format(estimatedTime / Math.pow(10, 9)) +
                    " секунд" + "\n" + "Додати ?";

            //option dialog with addResults(to diagram)
            Object[] options = {"Додати", "Закрити"};
            choice = JOptionPane.showOptionDialog(null, msg, "Result", JOptionPane.YES_NO_OPTION,
                                                    JOptionPane.INFORMATION_MESSAGE, null, options, options[1]);
            checkAddResult(choice);
        } else if (algorithmType == 3) {
            //initialize ACO algorithm
            AntColonyOptimization ant = new AntColonyOptimization(primalTour,Double.parseDouble(parametrField2.getText()),
                    Double.parseDouble(parametrField3.getText()));
            //perform optimization
            ant.startAntOptimization(Integer.parseInt(parametrField1.getText()), jTextAreaTours);
        } else {
                JOptionPane.showMessageDialog(null, "Оберіть алгоритм");
                return;
        }
    }

    public static void createAndShowGUI(Tour tour) {
        JFrame f = new JFrame("Annealing simulation for TSP");
        f.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);

        myPanel = new TSPGUI.MyPanel(tour);

        f.add(myPanel);
        f.pack();
        f.setVisible(true);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String []args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TSPMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TSPMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TSPMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TSPMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TSPMainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    // Generated using JFormDesigner Evaluation license - Artem
    private JLabel jLabelCount;
    private JButton jButtonStart;
    private JTextField jTextFieldCount;
    private JScrollPane jScrollPane1;
    private JTextArea jTextAreaCity;
    private JButton jButtonCancel;
    private JScrollPane jScrollPane2;
    public static JTextArea jTextAreaTours;
    private JLabel jLabel1;
    private JLabel jLabel2;
    private JButton jButtonRandom;
    private JButton jButton50test;
    private JTabbedPane tabbedPane1;
    private JPanel panelSettings;
    private JLabel labelAlgorithm;
    private JRadioButton radioButtonAnnealing;
    private JRadioButton radioButtonGenetic;
    private JRadioButton radioButtonBranches;
    private JLabel labelParametr;
    private JLabel parametrLabel1;
    private JTextField parametrField1;
    private JLabel parametrLabel2;
    private JTextField parametrField2;
    private JLabel parametrLabel3;
    private JTextField parametrField3;
    private JLabel parametrLabel4;
    private JTextField parametrField4;
    private JCheckBox checkBoxParametr1;
    private JButton branchesButton;
    private JPanel panelDiagram;
    private JButton buttonClearResults;
    private JButton buttonDiagram;
    private JPanel panelGuide;
    private JScrollPane scrollPane1;
    private JTextArea textAreaInstructions;
    private JButton buttonShow;
    // End of variables declaration//GEN-END:variables
}
